#+TITLE: Literate Emacs Config
#+AUTHOR: Joshua Person
#+LANGUAGE: en
#+STARTUP: inlineimages
#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no

* Config
** Doom Basics
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Joshua Person"
      user-mail-address "noonker@pm.me")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-outrun-electric)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
** Global
*** Theme
#+begin_src emacs-lisp
(set-face-attribute 'region nil :background "#122231")
#+end_src
*** Requires
#+begin_src emacs-lisp
(require 'ox-twbs)
(require 'org-bullets)
;; (require 'ein-jupyter)
(require 'cl)
(require 'epg-config)
(require 'org-download)

;; Global Modes
(global-flycheck-mode)
(global-company-mode)
(projectile-global-mode)
(elpy-enable)
(yas-global-mode 1)
(projectile-mode +1)
(winner-mode 1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(display-time-mode 1)
(global-prettify-symbols-mode +1)
(setq-default flycheck-disabled-checker '(emacs-lisp-checkdoc))
(setq dired-dwim-target t)
#+end_src
**** Smooth Scrolling
#+begin_src emacs-lisp
    ;; scroll one line at a time (less "jumpy" than defaults)

    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time

    (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

    (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

    (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src
*** OS Specifics
**** Meta
#+begin_src emacs-lisp
;; Macro for OS checking
;;  https://stackoverflow.com/questions/1817257/how-to-determine-operating-system-in-elisp
(defmacro with-system (type &rest body)
  "Evaluate BODY if `system-type' equals TYPE."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))
#+end_src
**** OSX
#+begin_src emacs-lisp
(when (memq window-system '(mac ns))
(exec-path-from-shell-initialize)
(exec-path-from-shell-copy-envs '("PATH")))
#+end_src
**** Windows
#+begin_src emacs-lisp
;; Use plink on windows
(with-system windows-nt
  (message "this is a windows system! I know this")
  (require 'tramp)
  (set-default 'tramp-default-method "plink"))
#+end_src
*** Registers
#+begin_src emacs-lisp
(set-register ?d '"import pdb\npdb.set_trace()")
(set-register ?r '"%load_ext autoreload\n%autoreload 2")
(set-register ?e '"sudo docker run -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.3.2 -v \"$PWD/config\":/usr/share/elasticsearch/config")
(set-register ?c '"sudo socat TCP-LISTEN:6001,reuseaddr,fork EXEC:\"qrexec-client-vm screenshare my-screenshare\"&")
(set-register ?p '"\\(\\([0-9]\\{1,3\\}\\(\\.\\|\\[\\.\\]\\)\\)\\{3\\}[0-9]\\{1,3\\}\\)")
(set-register ?o '"\\([a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)\\)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)[a-zA-Z]\\{2,11\\}")
(set-register ?i '"\\(\\(\\([0-9]\\{1,3\\}\\(\\.\\|\\[\\.\\]\\)\\)\\{3\\}[0-9]\\{1,3\\}\\)\\|\\([a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)\\)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)[a-zA-Z]\\{2,11\\}\\)")
(set-register ?s '";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with <open> and enter text in its buffer.
")
#+end_src

*** Misc
#+begin_src emacs-lisp
(setq file-name-handler-alist (cons epa-file-handler nil))
(defalias 'epa--decode-coding-string 'decode-coding-string)
(setq epa-file-encrypt-to "noonker@gmail.com")
(setq projectile-current-project-on-switch 'keep)
(global-subword-mode 1)
(setq visible-bell 1)
(add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
(add-hook 'clojure-mode-hook (lambda () (lispy-mode 1)))
(add-hook 'lisp-mode-hook (lambda () (lispy-mode 1)))
(setf epa-pinentry-mode 'loopback)

(setq reb-re-syntax 'string)
(setq url-user-agent " ") ;; I don't remember why I did this
(setq twittering-use-master-password t) ;; Twitter password shenanagans

(require 'recentf)
(setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
(recentf-mode 1)

(defalias 'yes-or-no-p 'y-or-n-p) ;; Shorten yes and no

(setq tab-width 2 indent-tabs-mode nil) ;; Spaces, not tabs

;;; Move backups
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)

(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

;; Company Mode
(setq company-dabbrev-downcase 0)
(setq company-idle-delay 0.3)
(setq company-minimum-prefix-length 2)

(defun complete-or-indent ()
  (interactive)
  (if (company-manual-begin)
      (company-complete-common)
    (indent-according-to-mode)))

(defun indent-or-complete ()
  (interactive)
  (if (looking-at "\\_>")
      (company-complete-common)
    (indent-according-to-mode)))

;; Rainbow Delims
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook 'rainbow-mode)

;; Ace menu
(ace-popup-menu-mode 1)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;; Reveal
(setq org-reveal-root "file:///home/user/git/reveal.js")

;; Windmove
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

(setq gnutls-verify-error nil)

#+end_src
** Custom Functions
#+begin_src emacs-lisp
(defun is-tramp-window ()
  (if (file-remote-p default-directory) t nil))

(defun no-fonts-pls ()
  (interactive)
  (let ((inhibit-read-only t))
   (set-text-properties (point-min) (point-max) nil)))

(defun what-is-my-ip ()
  (interactive)
  (message "IP: %s"
           (with-current-buffer (url-retrieve-synchronously "https://api.ipify.org")
             (buffer-substring (+ 1 url-http-end-of-headers) (point-max)))))

(defun character-below ()
  (save-excursion
    (next-line)
    (string (char-after (point)))))


(defun replace-below (cur rep bel)
  (interactive)
  (let ((pos 1)
	(tmp))
    (while (< pos (point-max))
      (if (equal cur (string (char-after pos)))
	  (if (equal bel (character-above))
	      (progn (delete-char 1) (insert rep))
	      ))
      (setq pos (+ 1 pos))
      (goto-char pos)
    )))

(defun image-to-text ()
  (interactive)
  (if buffer-file-name
    (progn
      ;; Convert the file to a tif file for tesseract consumption.
      (shell-command (concat "convert " buffer-file-name " -resize 400% -type Grayscale " buffer-file-name ".tif"))
      ;; Convert the file from tif to txt using tesseract.
      (shell-command (concat "tesseract -l eng " buffer-file-name ".tif " buffer-file-name))
      ;; Delete the tif file artifact.
      (shell-command (concat "rm " buffer-file-name ".tif"))
      ;; Open the text file in buffer, this should be the text found in the image converted.
      (find-file (concat buffer-file-name ".txt")))))

(defun yt-dl-it (url)
  "Downloads the URL in an async shell"
  (let ((default-directory "~/Videos"))
    (async-shell-command (format "youtube-dl %s" url))))

(defun ruthless-kill ()
  "Kill the line without copying it"
  (interactive)
  (delete-region (point) (line-end-position)))

(defun insert-current-date ()
  "Insert the current date"
  (interactive)
  (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))

;; Start Selenium
(defun selenium()
  (interactive)
  (save-excursion
    (async-shell-command "java -jar $HOME/Documents/selenium.jar")))

;; Start Selenium
(defun mopidy()
  (interactive)
  (save-excursion
    (ansi-term "mopidy" "mopidy")))
;; Temporarily maximize buffers
(defun toggle-maximize-buffer () "Maximize buffer"
  (interactive)
  (if (= 1 (length (window-list)))
    (jump-to-register '_)
    (progn
      (set-register '_ (list (current-window-configuration)))
      (delete-other-windows))))

;; Slack code for highlighted text
;; Todo auto expand the selected reason
(defun sc (b e)
  "adds slack tags for code"
  (interactive "r")
  (save-restriction
    (narrow-to-region b e)
    (save-excursion
      (goto-char (point-min))
        (insert (format "%s\n" "```"))
	(goto-char (point-max))
        (insert (format "\n%s" "```"))
        )))

;; Indentation and cleanup
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))

;; cnc-command
(defun visible-buffers ()
  "Definition"
  (interactive)
  (mapcar '(lambda (window) (buffer-name (window-buffer window))) (window-list)))

(defun all-buffers-except-this ()
  "Definition"
  (interactive)
  (delete (buffer-name (current-buffer)) (visible-buffers))
  )

(defun cnc-from-file ()
  "A command to run commands on the other open buffers"
  (interactive)
  (dolist (elt (all-buffers-except-this))
    (comint-send-string elt (format "%s\n" (thing-at-point `line))))
  (next-line)
  t
  )

(defun cnc-prompt (cmd)
  "A command to run commands on the other open buffers"
  (interactive "sCmd: ")
  (dolist (elt (visible-buffers))
    (comint-send-string elt (format "%s\n" cmd)))
  )

;; Easy window splitting
(defun split-maj-min (number)
(interactive "N")
"Function to split windows into one major window and multiple minor windows"
(split-window-horizontally)
(other-window 1)
(while (> number 1)
  (setq number (+ -1 number))
  (split-window-vertically))
(balance-windows))

(defun split-cnc (number)
(interactive "N")
"Function to split windows into one major window and multiple minor ansi-terms"
(split-window-horizontally)
(other-window 1)
(ansi-term "/bin/bash" "cnc")
(while (> number 1)
  (split-window-vertically)
  (ansi-term "/bin/bash" "cnc")
  (other-window 1)
  (setq number (+ -1 number)))
(ansi-term "/bin/bash" "cnc")
(other-window 1)
(balance-windows))

(defun sudo ()
  "Use TRAMP to `sudo' the current buffer"
  (interactive)
  (when buffer-file-name
    (find-alternate-file
     (concat "/sudo:root@localhost:"
             buffer-file-name))))

(defun proxy (text &optional port)
  (interactive "sHost: ")
  (async-shell-command (format "ssh -D 1337 -C -q -N %s" text) (format "*proxy: %s*" text)))

(defun xah-delete-current-file-make-backup (&optional @no-backup-p)
  "Delete current file, makes a backup~, closes the buffer.

Backup filename is “‹name›~‹date time stamp›~”. Existing file of the same name is overwritten. If the file is not associated with buffer, the backup file name starts with “xx_”.

When `universal-argument' is called first, don't create backup.

URL `http://ergoemacs.org/emacs/elisp_delete-current-file.html'
Version 2016-07-20"
  (interactive "P")
  (let* (
         ($fname (buffer-file-name))
         ($buffer-is-file-p $fname)
         ($backup-suffix (concat "~" (format-time-string "%Y%m%dT%H%M%S") "~")))
    (if $buffer-is-file-p
        (progn
          (save-buffer $fname)
          (when (not @no-backup-p)
            (copy-file
             $fname
             (concat $fname $backup-suffix)
             t))
          (delete-file $fname)
          (message "Deleted. Backup created at 「%s」." (concat $fname $backup-suffix)))
      (when (not @no-backup-p)
        (widen)
        (write-region (point-min) (point-max) (concat "xx" $backup-suffix))
        (message "Backup created at 「%s」." (concat "xx" $backup-suffix))))
    (kill-buffer (current-buffer))))

(defun xah-delete-current-file (&optional @no-backup-p)
  "Delete current file or directory of dired.
If buffer is a file, make a backup~, push content to `kill-ring' (unless buffer is greater than 1 mega bytes.), then delete it.
If buffer is not associate with a file, push content to `kill-ring' (unless buffer is greater than 1 mega bytes.), then kill it.
If buffer is dired, do nothing.

This commands may call `xah-delete-current-file-make-backup'.

If next buffer is dired, refresh it.

URL `http://ergoemacs.org/emacs/elisp_delete-current-file.html'
Version 2020-02-14"
  (interactive "P")
  (if (eq major-mode 'dired-mode)
      (progn
        (message "you in dired. nothing's done.")
        ;; (dired-up-directory)
        ;; (dired-flag-file-deletion 1)
        ;; (dired-do-flagged-delete)
        ;; (revert-buffer)
        )
    (let (($bstr (buffer-string)))
      (when (> (length $bstr) 0)
        (if (< (point-max) 1000000)
            (kill-new $bstr)
          (message "Content not copied. buffer size is greater than 1 megabytes.")))
      (if (buffer-file-name)
          (xah-delete-current-file-make-backup @no-backup-p)
        (when (buffer-file-name)
          (when (file-exists-p (buffer-file-name))
            (progn
              (delete-file (buffer-file-name))
              (message "Deleted file: 「%s」." (buffer-file-name)))))
        (let ((buffer-offer-save nil))
          (set-buffer-modified-p nil)
          (kill-buffer (current-buffer)))))))
#+end_src
** EJC / SQL / Athena
#+begin_src emacs-lisp
(require 'ejc-sql)
(setq clomacs-httpd-default-port 8090)
(require 'ejc-autocomplete)
(add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (auto-complete-mode t)
            (ejc-ac-setup)))
(setq ejc-use-flx t)
(setq ejc-flx-threshold 2)
(require 'ejc-company)
(push 'ejc-company-backend company-backends)
(add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (company-mode t)))
(company-quickhelp-mode)
(add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (ejc-eldoc-setup)))
(add-hook 'ejc-sql-connected-hook
          (lambda ()
            (ejc-set-fetch-size 50)
            (ejc-set-max-rows 50)
            (ejc-set-show-too-many-rows-message t)
            (ejc-set-column-width-limit 25)))


    ;; setup with use-package
(use-package ejc-sql
  :commands
  (ejc-create-connection ejc-connect ejc-set-column-width-limit)
  :init
  (setq ejc-set-rows-limit 1000
        ejc-result-table-impl 'orgtbl-mode ;; 'ejc-result-mode
        ejc-use-flx t
        ejc-flx-threshold 3
        nrepl-sync-request-timeout 30)
  ;; enable auto complete
  (add-hook 'ejc-sql-minor-mode-hook
            (lambda ()
              (auto-complete-mode t)
              (ejc-ac-setup))))
#+end_src
** Term / Fish / CLI
#+begin_src  emacs-lisp
(when (and (executable-find "fish")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))

(eval-after-load "term"
  '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))

(eshell-git-prompt-use-theme 'robbyrussell) ;; Eshell theme

;; Eshell
(defun git-prompt-eshell ()
  "Git a git prompt"
 (let (beg dir git-branch git-dirty end)
   (if (eshell-git-prompt--git-root-dir)
       (progn
	 (setq eshell-git-prompt-branch-name (eshell-git-prompt--branch-name))
	 (setq git-branch
	       (concat
		(with-face "git:(" 'eshell-git-prompt-robyrussell-git-face)
		 (with-face (eshell-git-prompt--readable-branch-name) 'eshell-git-prompt-robyrussell-branch-face)
		(with-face ")" 'eshell-git-prompt-robyrussell-git-face)))
	 (setq git-dirty
	    (when (eshell-git-prompt--collect-status)
	        (with-face "✗" 'eshell-git-prompt-robyrussell-git-dirty-face)))
	 (concat git-branch git-dirty)) "☮" )))

(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize "┌─[" 'face 'org-level-4)
         (propertize (user-login-name) 'face 'org-level-1)
         (propertize "@" 'face 'org-level-4)
         (if (is-tramp-window)
           (propertize (file-remote-p default-directory) 'face 'org-level-3)
           (propertize (system-name) 'face 'org-level-3))
         (propertize "]──[" 'face 'org-level-4)
         (propertize (format-time-string "%H:%M" (current-time)) 'face 'org-level-2)
         (propertize "]──[" 'face 'org-level-4)
         (propertize (concat (eshell/pwd)) 'face `(:foreground "white"))
         (propertize "]──[" 'face 'org-level-4)
         (if (is-tramp-window) "🌎"
           (concat (propertize (git-prompt-eshell) 'face 'org-level-6)
           (if pyvenv-virtual-env-name (concat (propertize "]──[" 'face 'org-level-4)
                                             (propertize (format "venv:%s" pyvenv-virtual-env-name) 'face 'org-level-2)))))
         (propertize "]\n" 'face 'org-level-4)
         (propertize "└─>" 'face 'org-level-4)
         (propertize (if (= (user-uid) 0) " # " " $ ") 'face 'org-level-4)
         )))

(setq eshell-visual-commands '("htop" "vi" "screen" "top" "less"
                               "more" "lynx" "ncftp" "pine" "tin" "trn" "elm"
                               "vim"))

(setq eshell-visual-subcommands '("git" "log" "diff" "show" "ssh"))

(setenv "PAGER" "cat")

(defalias 'ff 'find-file)
(defalias 'd 'dired)

(defun eshell/clear ()
  (let ((inhibit-read-only t))
    (erase-buffer)))

(defun eshell/gst (&rest args)
    (magit-status (pop args) nil)
    (eshell/echo))   ;; The echo command suppresses output

#+end_src

** IRC / ERC
#+begin_src emacs-lisp
(erc-colorize-mode 1)
;; (setq gnutls-verify-error nil)
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+end_src

** Slack
#+begin_src emacs-lisp
;;; Big QOL changes.
(setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
(setq slack-buffer-function #'switch-to-buffer)
(setq slack-prefer-current-team t)
(setq slack-display-team-name nil)
(add-hook 'slack-mode-hook #'emojify-mode)
(setq slack-buffer-create-on-notify t)
;; (setq alert-default-style 'mode-line)
(setq alert-default-style 'notifications)

(defun slack-user-status (_id _team) "")
#+end_src
** Tramp
#+begin_src emacs-lisp
;;; no vc in tramp
(setq remote-file-name-inhibit-cache nil)
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
	      vc-ignore-dir-regexp
	      tramp-file-name-regexp))
(setq tramp-verbose 1)
(defadvice projectile-on (around exlude-tramp activate)
  "This should disable projectile when visiting a remote file"
  (unless  (--any? (and it (file-remote-p it))
                   (list
                    (buffer-file-name)
                    list-buffers-directory
                    default-directory
                    dired-directory))
    ad-do-it))
(setq projectile-mode-line "Projectile")
#+end_src

** Helm
#+begin_src emacs-lisp
(setq helm-mini-default-sources
      '(helm-source-buffers-list
        helm-source-bookmarks
        helm-source-recentf
        helm-source-grep-ag
        helm-source-buffer-not-found))
#+end_src

** ES / Elasticsearch
#+begin_src emacs-lisp
(autoload 'es-mode "es-mode.el"
            "Major mode for editing Elasticsearch queries" t)
(add-to-list 'auto-mode-alist '("\\.es$" . es-mode))
#+end_src

** W3M
#+begin_src emacs-lisp
(defun ffap-w3m-other-window (url &optional new-session)
  "Browse url in w3m.
  If current frame has only one window, create a new window and browse the webpage"
  (interactive (progn
                 (require 'browse-url)
                 (browse-url-interactive-arg "Emacs-w3m URL: ")))
  (let ((w3m-pop-up-windows t))
    (if (one-window-p) (split-window))
    (other-window 1)
    (w3m-goto-url-new-session url new-session)
    (other-window 1)))

;;(setq browse-url-browser-function 'browse-url-firefox)

(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)


(setq w3m-use-cookies t)

(defun rand-w3m-view-this-url-background-session ()
  (interactive)
  (let ((in-background-state w3m-new-session-in-background))
    (setq w3m-new-session-in-background t)
    (w3m-view-this-url-new-session)
    (setq w3m-new-session-in-background in-background-state)))

(defun my-w3m-bindings ()
  (define-key w3m-mode-map (kbd "C-<return>") 'rand-w3m-view-this-url-background-session))

(add-hook 'w3m-mode-hook 'my-w3m-bindings)

(defun rand-w3m-view-this-url-background-session ()
  (interactive)
  (let ((in-background-state w3m-new-session-in-background))
    (setq w3m-new-session-in-background t)
    (w3m-view-this-url-new-session)
    (setq w3m-new-session-in-background in-background-state)))

(defun my-w3m-bindings ()
  (define-key w3m-mode-map (kbd "C-<return>") 'rand-w3m-view-this-url-background-session))

(add-hook 'w3m-mode-hook 'my-w3m-bindings)
#+end_src

*** Email / Notmuch
#+begin_src emacs-lisp
(require 'notmuch)
(require 'offlineimap)

;; (global-set-key (kbd "C-c c g") 'notmuch)
(global-set-key (kbd "C-c c n") (lambda ()
                                  (interactive)
                                  (notmuch-search "tag:inbox")))

;; (define-key notmuch-search-mode-map "q" (lambda ()
;;                                           (interactive)
;;                                           (notmuch-search-quit)))
;; (define-key notmuch-show-mode-map "q"
;;   (lambda ()
;;     (interactive)
;;     (notmuch-kill-this-buffer)
;;     (if (and (eq major-mode 'notmuch-search-mode)
;;              (< (buffer-size) 1024))
;;         (notmuch-search-refresh-view))))

;; (define-key notmuch-search-mode-map "S"
;;   (lambda (&optional beg end)
;;     "mark thread as spam"
;;     (interactive (notmuch-interactive-region))
;;     (notmuch-search-tag (list "-inbox" "+spam") beg end)))


(setq notmuch-search-oldest-first nil)

(define-key notmuch-search-mode-map "i"
      (lambda ()
        "remove fomr inbox"
        (interactive)
        (notmuch-search-remove-tag (list "-inbox"))
        ))


#+end_src

*** SMTP
#+begin_src emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it
    smtpmail-auth-credentials "~/.authinfo"
    smtpmail-smtp-server "127.0.0.1"
    smtpmail-smtp-service 1025)

(defun todo (text &optional body)
  (interactive "sTodo: ")
  (compose-mail-other-window "noonker@pm.me" text)
  (mail-text)
  (if body
      (insert body))
  (message-send-and-exit)
  )
#+end_src

*** Slack
#+begin_src emacs-lisp
(setq slack-message-notification-title-format-function
      (lambda (_team room threadp)
        (concat (if threadp "Thread in #%s") room)))

(defun endless/-cleanup-room-name (room-name)
  "Make group-chat names a bit more human-readable."
  (replace-regexp-in-string
   "--" " "
   (replace-regexp-in-string "#mpdm-" "" room-name)))

;;; Private messages and group chats
(setq
 slack-message-im-notification-title-format-function
 (lambda (_team room threadp)
   (concat (if threadp "Thread in %s")
           (endless/-cleanup-room-name room))))

(defun slk ()
  "start slack"
  (interactive)
  (slack-start)
  (cl-defmethod slack-buffer-name ((_class (subclass slack-room-buffer)) room team)
    (slack-if-let* ((room-name (slack-room-name room team)))
	(format  ":%s"
		 room-name)))
  (slack-change-current-team)
)
#+end_src
** Multimedia
*** Emms
#+begin_src emacs-lisp
(require 'emms-setup)
(require 'emms-streams)
(require 'emms-stream-info)

;; EMMS Streams
(setq emms-stream-default-list
      (append
       '(("SomaFM: Dubstep" "http://somafm.com/dubstep130.pls" 1 streamlist)
	       ("SomaFM: Goa" "http://somafm.com/suburbsofgoa130.pls" 1 streamlist)
	       ("SomaDM: The Trip" "http://somafm.com/thetrip130.pls" 1 streamlist)
	       ("SomaDM: Boot Liquor" "http://somafm.com/bootliquor130.pls" 1 streamlist)
	       ("SomaDM: Digitails" "http://somafm.com/digitalis130.pls" 1 streamlist)
	       ("SomaDM: Space" "http://somafm.com/spacestation130.pls" 1 streamlist)
	       ("SomaDM: Bagel" "http://somafm.com/bagel130.pls" 1 streamlist)
	       ("SomaDM: Soul" "http://somafm.com/7soul130.pls" 1 streamlist)
	       ("SomaDM: Folk" "http://somafm.com/folkfwd130.pls" 1 streamlist)
	       ("SomaDM: IDM" "http://somafm.com/cliqhop130.pls" 1 streamlist)
	       ("SomaDM: Lush" "http://somafm.com/lush130.pls" 1 streamlist)
	       ("SomaDM: SF1033" "http://somafm.com/sf1033130.pls" 1 streamlist)
	       ("SomaDM: DS1" "http://somafm.com/deepspaceone130.pls" 1 streamlist)
	       ("SomaDM: Jazz" "http://somafm.com/sonicuniverse130.pls" 1 streamlist))
       ;;emms-stream-default-list
       ))

 (setq emms-directory "~/org/emms"
	emms-stream-default-action "play"
	emms-stream-info-backend 'mplayer
	emms-stream-bookmarks-file "~/org/emms/streams"
	emms-mode-line-format " 𝄞 " )

(require 'emms-mode-line-icon)

;; (emms-mode-line-cycle 1)

 (emms-minimalistic)
 (emms-default-players)
 (emms-mode-line-enable)

 (advice-add 'emms-stream-info-mplayer-backend
	      :override
	      (lambda (url)
		"The original function isn't working, using this temporarily until I figure it out."
		(condition-case excep
		    (call-process "mplayer" nil t nil
				  "-msglevel" "decaudio=-1:cache=-1:statusline=-1:cplayer=-1" "-cache" "180"
				  "-endpos" "0" "-vo" "null" "-ao" "null" "-playlist"
				  url)
		  (file-error
		   (error "Could not find the mplayer backend binary")))))
#+end_src

** Text Modes
*** Org Mode
**** Org Base
#+begin_src emacs-lisp
(setq org-directory "~/org")

(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))) ;; Add special bullets

(setq org-startup-align-all-tables t) ;; Aligns tables when a file is opened
(setq org-startup-shrink-all-tables t) ;; Shrinks tables according to <x> tags in the column headers

(setq org-clock-in-switch-to-state "IN-PROGRESS")
(setq org-clock-out-switch-to-state "TODO")

#+end_src
**** Deft
#+begin_src emacs-lisp
(setq deft-directory "~/org"
      deft-extentions '("org")
      deft-recursive t)

#+end_src

**** Org Download
#+begin_src emacs-lisp
(setq-default org-download-image-dir "~/org/resources/")
#+end_src
**** Org Timestamps
#+begin_src emacs-lisp
  ;;--------------------------
  ;; Handling file properties for ‘CREATED’ & ‘LAST_MODIFIED’
  ;;--------------------------

  (defun zp/org-find-time-file-property (property &optional anywhere)
    "Return the position of the time file PROPERTY if it exists.
When ANYWHERE is non-nil, search beyond the preamble."
    (save-excursion
      (goto-char (point-min))
      (let ((first-heading
             (save-excursion
               (re-search-forward org-outline-regexp-bol nil t))))
        (when (re-search-forward (format "^#\\+%s:" property)
                                 (if anywhere nil first-heading)
                                 t)
          (point)))))

  (defun zp/org-has-time-file-property-p (property &optional anywhere)
    "Return the position of time file PROPERTY if it is defined.
As a special case, return -1 if the time file PROPERTY exists but
is not defined."
    (when-let ((pos (zp/org-find-time-file-property property anywhere)))
      (save-excursion
        (goto-char pos)
        (if (and (looking-at-p " ")
                 (progn (forward-char)
                        (org-at-timestamp-p 'lax)))
            pos
          -1))))

  (defun zp/org-set-time-file-property (property &optional anywhere pos)
    "Set the time file PROPERTY in the preamble.
When ANYWHERE is non-nil, search beyond the preamble.
If the position of the file PROPERTY has already been computed,
it can be passed in POS."
    (when-let ((pos (or pos
                        (zp/org-find-time-file-property property))))
      (save-excursion
        (goto-char pos)
        (if (looking-at-p " ")
            (forward-char)
          (insert " "))
        (delete-region (point) (line-end-position))
        (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
          (insert now)))))

  (defun zp/org-set-last-modified ()
    "Update the LAST_MODIFIED file property in the preamble."
    (when (derived-mode-p 'org-mode)
      (zp/org-set-time-file-property "LAST_MODIFIED")))

(add-hook 'before-save-hook #'zp/org-set-last-modified )

#+end_src
**** Org Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)
   (elasticsearch . t)
   (python . t)
   (restclient . t)
   (plantuml . t)
   (shell . t)
   (sql . t)
   (sqlite . t)
   (gnuplot . t)
   (ein . t)
   (C . t)))

(setq org-plantuml-jar-path
      (expand-file-name  "/usr/local/Cellar/plantuml/1.2021.7/libexec/plantuml.jar"))
#+end_src
**** Org Agenda
#+begin_src emacs-lisp
(setq org-agenda-basedir "~/org/tasks")

(setq org-archive-file-header-format nil)

(defun  org-init-agenda ()
  (interactive)
  (let ((initial '(("backlog.org" nil)
                   ("recurring.org" nil)
		   ("today.org" nil)
		   ("projects" t)
		   ("archive" t)))
        (todostr "#+TODO: TODO IN-PROGRESS | DONE WONTDO"))
    (if (not (file-directory-p org-agenda-basedir))
      (make-directory org-agenda-basedir))

    (dolist (element initial)
      (let ((name  (nth 0 element))
            (isdir (nth 1 element)))
        ;; If the file doesn't exist and not flagged as dir
        (if (and (not isdir)
                 (not (file-directory-p (format "%s/%s" org-agenda-basedir name))))
          (write-region todostr nil (format "%s/%s" org-agenda-basedir name)))

        ;; If the file doesn't exist and is flagged as dir
        (if (and isdir
                 (not (file-directory-p (format "%s/%s" org-agenda-basedir name))))
          (make-directory (format "%s/%s" org-agenda-basedir name)))))))


(setq org-agenda-files (append (list (format "%s/backlog.org" org-agenda-basedir)
				     (format "%s/recurring.org" org-agenda-basedir)
                     (format "%s/meetings.org" org-agenda-basedir)
				     (format "%s/today.org" org-agenda-basedir))
			       (directory-files-recursively (format "%s/projects/" org-agenda-basedir) "^[0-9a-zA-Z\-_]*?\.org$")
			       ))

(setq org-archive-location (format "%s/archive/%s.org::" org-agenda-basedir (format-time-string "%Y-%m-%d")))

(defun org-agenda-new-day ()
       (interactive)
       (with-current-buffer (find-file (format "%s/today.org" org-agenda-basedir))
	 (mark-whole-buffer)
	 (kill-region (mark) (point))
	 (if (= (buffer-size) 0) (insert "#+CREATED: %U\n#+LAST_MODIFIED: %U#+TODO: TODO IN-PROGRESS | DONE WONTDO\n\n* Tasks\n* Thoughts\n")))
(org-agenda))

(defun org-complex-tasks ()
  (interactive)
  (let ((tasks  (quote ("TODO Create Jira Ticket"
                        "TODO Documentation"
                        "TODO Close Jira Ticket"))))
    (org-end-of-line)
    (insert " [/]")
    (org-insert-heading)
    (org-demote-subtree)
    (insert (car tasks))
    (dolist (element (cdr tasks))
      (org-insert-heading)
      (insert element))))
#+end_src
**** Org Jira
#+begin_src emacs-lisp
(setq org-jira-jira-status-to-org-keyword-alist
       '(("IN PROGRESS" . "INPROGRESS")
         ("TO DO" . "TODO")
         ("DONE" . "DONE")))
#+end_src
**** Org Refile
#+begin_src emacs-lisp
(setq org-blogpost-directory (directory-files (format "%s/blog/content/posts" org-directory) t))
(setq org-investigations-directory (directory-files (format "%s/investigations" org-directory) t))
(setq org-cheatsheet-directory (directory-files (format "%s/cheatsheet" org-directory) t))
(setq org-notes-directory (directory-files (format "%s/notes" org-directory) t))
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)
                           ;; (org-blogpost-directory :maxlevel . 1)
                           (org-investigations-directory :maxlevel . 1)
                           ;; (org-cheatsheet-directory :maxlevel . 1)
                           ;; (org-notes-directory :maxlevel . 1)
                           ))
(setq org-refile-allow-creating-parent-nodes t)
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-outline-path 'file)
#+end_src
**** Org Capture
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("b" "Backlog" entry (file+headline (lambda () (format "%s/backlog.org" org-agenda-basedir)) "Backlog")
         "** TODO %?\n  %i\n  %a")
        ("i" "Investigations" entry (file+headline (lambda () (format "%s/investigations/index.org" org-directory)) "Investigations")
         "** %<%Y-%m-%d>-%?\n")
        ("t" "Today" entry (file+headline (lambda () (format "%s/today.org" org-agenda-basedir)) "Tasks")
         "** TODO %?\n SCHEDULED: %t")
	       ("n" "Now" entry (file+headline (lambda () (format "%s/today.org" org-agenda-basedir)) "Tasks")
         "** TODO %?\n SCHEDULED: %t" :clock-in t)
        ("c" "Cookbook" entry (file "~/org/cookbook.org")
         "%(org-chef-get-recipe-from-url)"
         :empty-lines 1)
        ("m" "Manual Cookbook" entry (file "~/org/cookbook.org")
         "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")
        ("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
        "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
	    ("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
        "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")
	))

(setq org-roam-capture-templates '(
        ("n" "notes" plain (function org-roam--capture-get-point)
         "%?"
         :file-name "notes/%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n#+ROAM_ALIAS:\n#+ROAM_TAGS: \n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"
         :unnarrowed t)
        ("i" "investigations" plain (function org-roam--capture-get-point)
         "%?"
         :file-name "investigations/%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"
         :unnarrowed t)
        ("n" "new investigation" plain (function org-roam--capture-get-point)
         "%?"
         :file-name "investigations/${slug}"
         :head "#+title: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"
         :unnarrowed t)
                                   ))
#+end_src

**** Org Roam
#+begin_src emacs-lisp
(setq org-roam-directory "~/org/")
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

**** Org Protocol
#+begin_src emacs-lisp
(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat
  (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform))
  )

#+end_src

*** LaTex
#+begin_src emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
#+end_src
** Programming Modes
*** Python
#+begin_src emacs-lisp
(setq org-babel-python-command "python3")

(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi 'elpy-mode))

(add-hook 'python-mode-hook 'my/python-mode-hook)
#+end_src

*** SBCL
#+begin_src emacs-lisp
(setq inferior-lisp-program "/usr/local/bin/sbcl")
(setq slime-contribs '(slime-fancy))
#+end_src
*** C/C++ / Platformio
#+begin_src emacs-lisp
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

(add-to-list 'company-backends 'company-irony) ;; Add the required company backend.

;; Enable irony for all c++ files, and platformio-mode only
;; when needed (platformio.ini present in project root).
(add-hook 'c++-mode-hook (lambda ()
                           (irony-mode)
                           (irony-eldoc)
                           (platformio-conditionally-enable)))

;; Use irony's completion functions.
(add-hook 'irony-mode-hook
          (lambda ()
            (define-key irony-mode-map [remap completion-at-point]
              'irony-completion-at-point-async)

            (define-key irony-mode-map [remap complete-symbol]
              'irony-completion-at-point-async)

            (irony-cdb-autosetup-compile-options)))

;; Setup irony for flycheck.
(add-hook 'flycheck-mode-hook 'flycheck-irony-setup)

(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)

(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-cg"
 helm-gtags-suggested-key-mapping t
 )

(require 'helm-gtags)
;; Enable helm-gtags-mode
(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

(define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
(define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)

(setq-local imenu-create-index-function #'ggtags-build-imenu-index)

(add-to-list 'company-backends 'company-c-headers)
(setq wdired-allow-to-change-permissions t)
#+end_src

** Elfeed
#+begin_src emacs-lisp
(require 'elfeed)
(defun elfeed-mail-todo (&optional use-generic-p)
  "Mail this to myself for later reading"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-title entry)
             do (todo it (elfeed-entry-link entry)))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-eww-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (eww-browse-url it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-firefox-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (browse-url-firefox it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-w3m-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (ffap-w3m-other-window it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-youtube-dl (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (yt-dl-it it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-org-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (org-web-tools-read-url-as-org it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(define-key elfeed-search-mode-map (kbd "m") 'elfeed-mail-todo)
(define-key elfeed-search-mode-map (kbd "t") 'elfeed-w3m-open)
(define-key elfeed-search-mode-map (kbd "w") 'elfeed-eww-open)
(define-key elfeed-search-mode-map (kbd "f") 'elfeed-firefox-open)
(define-key elfeed-search-mode-map (kbd "o") 'elfeed-org-open)
(define-key elfeed-search-mode-map (kbd "d") 'elfeed-youtube-dl)
#+end_src

** Processing
#+begin_src emacs-lisp
(setq processing-location "/usr/local/bin/processing-java")
(setq processing-application-dir "/Applications/Processing.app")
(setq processing-sketchbook-dir "~/Documents/Processing")

(defun processing-mode-init ()
  (make-local-variable 'ac-sources)
  (setq ac-sources '(ac-source-dictionary ac-source-yasnippet))
  (make-local-variable 'ac-user-dictionary)
  (setq ac-user-dictionary (append processing-functions
                                   processing-builtins
                                   processing-constants)))

(add-hook 'processing-mode-hook 'processing-mode-init)
#+end_src

** Twitter
#+begin_src emacs-lisp
(with-eval-after-load 'twittering-mode
  (defun *twittering-generate-format-table (status-sym prefix-sym)
    `(("%" . "%")
      ("}" . "}")
      ("#" . (cdr (assq 'id ,status-sym)))
      ("'" . (when (cdr (assq 'truncated ,status-sym))
               "..."))
      ("c" .
       (let ((system-time-locale "C"))
         (format-time-string "%a %b %d %H:%M:%S %z %Y"
                             (cdr (assq 'created-at ,status-sym)))))
      ("d" . (cdr (assq 'user-description ,status-sym)))
      ("f" .
       (twittering-make-string-with-source-property
        (cdr (assq 'source ,status-sym)) ,status-sym))
      ("i" .
       (when (and twittering-icon-mode window-system)
         (let ((url
                (cond
                 ((and twittering-use-profile-image-api
                       (eq twittering-service-method 'twitter)
                       (or (null twittering-convert-fix-size)
                           (member twittering-convert-fix-size '(48 73))))
                  (let ((user (cdr (assq 'user-screen-name ,status-sym)))
                        (size
                         (if (or (null twittering-convert-fix-size)
                                 (= 48 twittering-convert-fix-size))
                             "normal"
                           "bigger")))
                    (format "http://%s/%s/%s.xml?size=%s" twittering-api-host
                            (twittering-api-path "users/profile_image") user size)))
                 (t
                  (cdr (assq 'user-profile-image-url ,status-sym))))))
           (twittering-make-icon-string nil nil url))))
      ("I" .
       (let* ((entities (cdr (assq 'entity ,status-sym)))
              text)
         (mapc (lambda (url-info)
                 (setq text (or (cdr (assq 'media-url url-info)) "")))
               (cdr (assq 'media entities)))
         (if (string-equal "" text)
             text
           (let ((twittering-convert-fix-size 360))
             (twittering-make-icon-string nil nil text)))))
      ("j" . (cdr (assq 'user-id ,status-sym)))
      ("L" .
       (let ((location (or (cdr (assq 'user-location ,status-sym)) "")))
         (unless (string= "" location)
           (concat " [" location "]"))))
      ("l" . (cdr (assq 'user-location ,status-sym)))
      ("p" . (when (cdr (assq 'user-protected ,status-sym))
               "[x]"))
      ("r" .
       (let ((reply-id (or (cdr (assq 'in-reply-to-status-id ,status-sym)) ""))
             (reply-name (or (cdr (assq 'in-reply-to-screen-name ,status-sym))
                             ""))
             (recipient-screen-name
              (cdr (assq 'recipient-screen-name ,status-sym))))
         (let* ((pair
                 (cond
                  (recipient-screen-name
                   (cons (format "sent to %s" recipient-screen-name)
                         (twittering-get-status-url recipient-screen-name)))
                  ((and (not (string= "" reply-id))
                        (not (string= "" reply-name)))
                   (cons (format "in reply to %s" reply-name)
                         (twittering-get-status-url reply-name reply-id)))
                  (t nil)))
                (str (car pair))
                (url (cdr pair))
                (properties
                 (list 'mouse-face 'highlight 'face 'twittering-uri-face
                       'keymap twittering-mode-on-uri-map
                       'uri url
                       'front-sticky nil
                       'rear-nonsticky t)))
           (when (and str url)
             (concat " " (apply 'propertize str properties))))))
      ("R" .
       (let ((retweeted-by
              (or (cdr (assq 'retweeting-user-screen-name ,status-sym)) "")))
         (unless (string= "" retweeted-by)
           (concat " (retweeted by " retweeted-by ")"))))
      ("S" .
       (twittering-make-string-with-user-name-property
        (cdr (assq 'user-name ,status-sym)) ,status-sym))
      ("s" .
       (twittering-make-string-with-user-name-property
        (cdr (assq 'user-screen-name ,status-sym)) ,status-sym))
      ("U" .
       (twittering-make-fontified-tweet-unwound ,status-sym))
      ;; ("D" .
      ;;  (twittering-make-fontified-tweet-unwound ,status-sym))
      ("T" .
       ,(twittering-make-fontified-tweet-text
         `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
         twittering-regexp-hash twittering-regexp-atmark))
      ("t" .
       ,(twittering-make-fontified-tweet-text
         `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
         twittering-regexp-hash twittering-regexp-atmark))
      ("u" . (cdr (assq 'user-url ,status-sym)))))
  (advice-add #'twittering-generate-format-table :override #'*twittering-generate-format-table)
  (defface twitter-divider
    `((t (:underline (:color "grey"))))
    "The vertical divider between tweets."
    :group 'twittering-mode)
  (setq twittering-icon-mode t
        twittering-use-icon-storage t
        twittering-convert-fix-size 40
        twittering-status-format "
  %i  %FACE[font-lock-function-name-face]{  @%s}  %FACE[italic]{%@}  %FACE[error]{%FIELD-IF-NONZERO[❤ %d]{favorite_count}}  %FACE[warning]{%FIELD-IF-NONZERO[↺ %d]{retweet_count}}

%FOLD[   ]{%FILL{%t}
%QT{
%FOLD[   ]{%FACE[font-lock-function-name-face]{@%s}\t%FACE[shadow]{%@}
%FOLD[ ]{%FILL{%t}}
}}}

    %I

%FACE[twitter-divider]{                                                                                                                                                                                  }
"))
#+end_src

** Pretty Symbols
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook
            (lambda ()
              (push '("<=" . ?≤) prettify-symbols-alist)
	            (push '(">=" . ?≥) prettify-symbols-alist)
	            (push '("map" . ?↦) prettify-symbols-alist)
	            (push '("!=" . ?≠) prettify-symbols-alist)
	            (push '("==" . ?≡) prettify-symbols-alist)
	            (push '("None" . ?Ø) prettify-symbols-alist)
	            (push '("->" . ?→) prettify-symbols-alist)
	            (push '("<-" . ?←) prettify-symbols-alist)
	            (push '("->>" . ?⇉) prettify-symbols-alist)
	            (push '("not" . ?¬) prettify-symbols-alist)
	            (push '("union" . ?⋃) prettify-symbols-alist)
	            (push '("intersection" . ?⋂) prettify-symbols-alist)
	 ))

(add-hook 'clojure-mode-hook
	  (lambda ()
	    (push '("let" . ?⊢) prettify-symbols-alist)
	    (push '("defn" . ?ƒ) prettify-symbols-alist)
	    (push '("fn" . ?λ) prettify-symbols-alist)
	    (push '("doseq" . ?∀) prettify-symbols-alist)
	    (push '("comp" . ?∘) prettify-symbols-alist)
	    (push '("partial" . ?Ƥ) prettify-symbols-alist)
	    (push '("not=" . ?≠) prettify-symbols-alist)
	    ))

(add-hook 'org-mode-hook
	  (lambda ()
	    (push '("#+begin_src" . "ƒ") prettify-symbols-alist)
	    (push '("#+end_src" . "\\ƒ") prettify-symbols-alist)
	    (push '("#+BEGIN_SRC" . "ƒ") prettify-symbols-alist)
	    (push '("#+END_SRC" . "\\ƒ") prettify-symbols-alist)
	    (push '("#+begin_quote" . "「") prettify-symbols-alist)
	    (push '("#+BEGIN_QUOTE" . "「") prettify-symbols-alist)
	    (push '("#+end_quote" . "」") prettify-symbols-alist)
	    (push '("#+END_QUOTE" . "」") prettify-symbols-alist)
	    ))
#+end_src
** Graveyard
#+begin_src emacs-lisp
;; (set-face-attribute 'default nil :family "Monoid" :height 110)
;; (set-face-attribute 'default nil :family "Hack" :height 111)
#+end_src

** Keybindings
*** Global
#+begin_src emacs-lisp
(global-set-key [(super shift return)] 'toggle-maximize-buffer)
(global-set-key [f8] 'neotree-toggle)
(global-set-key (kbd "C-s-c C-s-c") 'mc/edit-lines)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-t") 'cleanup-region)
(global-set-key (kbd "C-c n") 'cleanup-buffer)
(global-set-key (kbd "C-c y") `cnc-prompt)
(global-set-key (kbd "C-c C-.") `cnc-from-file)
(global-set-key (kbd "C-'") 'ace-window)
(global-set-key (kbd "C-c l") 'helm-projectile-switch-to-buffer)
(global-set-key (kbd "C-c <left>") 'dumb-jump-back)
(global-set-key (kbd "C-c <right>") 'dumb-jump-go)
(global-set-key (kbd "C-c <down>") 'dumb-jump-quick-look)
(global-set-key (kbd "C-2") 'helm-mini)
(global-set-key (kbd "C-x j") 'kill-this-buffer)
(global-set-key (kbd "ESC M-RET") 'browse-url-firefox)
(global-set-key (kbd "C-x m") 'browse-url-at-point)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c k") 'ruthless-kill)
(global-set-key (kbd "M-S") 'slack-select-rooms)
(global-set-key (kbd "<f9>") 'spray-mode)
(global-set-key (kbd "<f12>") 'helm-pass)
;; (global-set-key (kbd "<f6>") 'xah-delete-current-file)
(global-set-key (kbd "C-c C-;") '+company/complete)

;;; Modes
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(setenv "SHELL" "/opt/homebrew/bin/fish")
(setq vterm-shell "/opt/homebrew/bin/fish")

(eval-after-load "lispy"
  `(progn
     ;; replace a global binding with own function
     ;;(define-key lispy-mode-map (kbd "C-e") 'my-custom-eol)
     ;; replace a global binding with major-mode's default
     (define-key lispy-mode-map (kbd "C-2") 'helm-mini)
     (define-key lispy-mode-map (kbd "C-4") 'lispy-arglist-inline)
     ;; replace a local binding
     ;; (lispy-define-key lispy-mode-map (kbd "C-4") 'lispy-arglist-inline)
     ))

#+end_src

** RFC Mode
#+begin_src emacs-lisp
(require 'rfc-mode)
(setq rfc-mode-directory (expand-file-name "~/Documents/rfc/"))
#+end_src

** Artist
#+begin_src emacs-lisp
(global-set-key (kbd "<f13>") 'artist-mouse-choose-operation)
#+end_src
** Load Other Files
#+begin_src emacs-lisp
;;(load "~/Documents/infodoc-theme.el")
;;(load "~/git/keybase-chat/keybase-markup.el")
;;(load "~/git/keybase-chat/keybase-chat.el")
#+end_src
